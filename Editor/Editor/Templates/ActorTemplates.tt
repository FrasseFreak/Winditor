<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Newtonsoft.Json"#>
// <#@ assembly name="$(ProjectDir)/../WCommon/lib/GameFormatReader.dll"#>
<#@ assembly name="$(TargetPath)"#>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="WindEditor" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="GameFormatReader.Common" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>

<#

var ProjectDirPath = Host.ResolveAssemblyReference("$(ProjectDir)");
var TemplatePath = ProjectDirPath + "resources/templates/MapEntityData";

#>
using GameFormatReader.Common;
using OpenTK;
using System.ComponentModel;
using System.Diagnostics;
using System;
using WindEditor.ViewModel;

namespace WindEditor
{
<#

// We sometimes have duplicate templates to handle loading from the file, so we'll not generate duplicate classes.
List<string> usedClassNames = new List<string>();
foreach (var file in Directory.GetFiles(TemplatePath))
{
    ActorDataDescriptor descriptor = JsonConvert.DeserializeObject<ActorDataDescriptor>(File.ReadAllText(file));
	string className = descriptor.ClassName;
	string parentClassName = string.IsNullOrEmpty(descriptor.ParentClassOverride) ? "Actor" : descriptor.ParentClassOverride;
#>
	// AUTO-GENERATED, MODIFICATIONS TO THIS FILE WILL BE LOST
	public partial class <#= className #> : <#= parentClassName #>
	{
		// Auto-Generated Properties from Templates
<#
		// We skip these fields as they're pulled out in the load function and we don't want duplicate properties.
		var skippedFields = new List<string>(new []{"Position", "XRotation", "YRotation", "ZRotation", "XScale", "YScale", "ZScale"});
		foreach(var field in descriptor.Fields)
		{
			if(skippedFields.Contains(field.FieldName.Replace(" ", "")))
				continue; 

			string fieldName = Regex.Replace(field.FieldName, @"[^a-z0-9_]", "", RegexOptions.IgnoreCase);
			string valueSource = String.IsNullOrEmpty(field.ValueSource) ? "Parameters" : field.ValueSource;
			string privateFieldName = "m_" + fieldName;
			string overrideName = field.FieldName == "Name" ? "override" : "";
			string categoryName = field.CategoryName != null ? field.CategoryName : "Misc.";

			
#>
<#		 // We hide padding and other fields that the user doesn't need to see/change.
		if(!field.IsHidden)
		{
#>
		[WProperty("<#= categoryName #>", "<#= field.FieldName #>", true)]
<# 
		}
#>
		<#= overrideName #>public int <#= fieldName #>
		{ 
			get { return (int)((<#= valueSource #> & <#= field.BitMask #>) >> <#= field.BitShift #>); }
			set
			{
<#
				if (valueSource.Contains("Auxillary"))
				{
#>
				<#= valueSource #> = (short)(<#= valueSource #> & ~<#= field.BitMask #> | (value << <#= field.BitShift #> & <#= field.BitMask #>));
<#				}
				else
				{
#>
				<#= valueSource #> = (int)(<#= valueSource #> & ~<#= field.BitMask #> | (value << <#= field.BitShift #> & <#= field.BitMask #>));
<#
				}
#>
				OnPropertyChanged("<#=fieldName#>");
			}
		}

<#		}#>
		// Constructor
		public <#= className #>(FourCC fourCC, WWorld world) : base(fourCC, world)
		{
			
		}
	}

<#
}
#>

} // namespace WindEditor
